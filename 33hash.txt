/*
This is an optimization of the hash function based on (3,3)-isogenies between superspecial p.p.a.s. implemented by Wouter Castryck and Thomas Decru in their paper 'Multiradical Isogenies' and the GitHub repository (https://github.com/KULeuven-COSIC/Multiradical-Isogenies).
*/

/*
The following is a hash function based on (3,3)-isogenies between superspecial p.p.a.s.
One can change the security level by changing the variable p at the top of the code.
The starting values of r,s,t in the function get_start_rst are hardcoded to represent
superspecial p.p.a.s. without special automorphisms.
Remark that the code is a proof of concept: certain exceptional cases discussed in the
accompanying paper are not implemented. However, these only occur with chance O(1/p),
which is negligble for cryptographic parameters.
*/

clear;

p86  := 2^86  + 163;
p128 := 2^128 + 1783;
p171 := 2^171 + 1839;
p256 := 2^256 + 931;

p := p86;

K := GF(p);
Kx<x> := PolynomialRing(K);
K<twist> := ext<K | x^2 + 3>; // The twists we work over are all defined up to square root of -3.
z3 := (twist + 1)/-2; // Cubic root of unity
Kx<x> := PolynomialRing(K);


function get_start_rst(p)
  case p:
   when p86:
    return
	71945437454451957483017416*twist + 59638549721281706539036986,
	50193634331017637463151671*twist + 35611130451315345975865656,
	12225199083061217775930418*twist + 21797061337841432812691693;
   when p128:
    return
	234679466529898282763966687469954206453*twist +
	    197205704037424508891532161369412918889,
	6506075079935192283470390729908444275*twist +
	    238626262491099128472757266266643447580,
	122042302386441623533973844083729285112*twist +
	    299928499859829690764517789833493281821;
   when p171:
    return
	2776853771374553006276324204933718277065098842093168*twist +
	    520981825498096371953359047657928643993866190737511,
	1985336696191293709353219294103009418487731756442378*twist +
	    121629541832919844147820885486146150221246052901352,
	2089617060400194820646859848539444431700090901412096*twist +
	    2298959468865366317837360639859149509808073102540589;
   when p256:
    return
	31783480117642466986398152901295326645623324237627809592525913156811765308614*twist
	    + 52056772514332455368836840276352100092710000495267222276799261242404800456196,
	102741108888789736916548693063230898663856636784761552169736201061436479965331*twist
	    + 1811359562655918746293313082481945074244333793196654175299667463511291349093,
	107953148178432856699325814511166823898186115047176537331828261980919003855855*twist
	    + 40096014858782103369484238428839313734690224923064293819032078786027930894697;
  end case;
end function;



function get_pairings(R, S, T)
  
  /*
   We go back to the previous (isogenous) curve for which the parameters R, S, T determine
   the (3,3)-dual kernel. The parameters r, s, t then determine the previous curve, on which
   we need to compute the Tate pairings.

   Remark that these are not the actual pairings, but factors of the pairings that make
   the computations easier. Adjoining all three of a, b, c to a field is the same as adjoining
   the actual Tate-pairings though.
  */

  d1 := T;
  d2 := S;
  tmp1:=d1*d2;
  d3 := tmp1 + 1;
  d8 := R^2 - T;
  d4 := R*(d8-2*d1)+ d1^2 + d1;
  d5 := d2*d4+d1;
  d9 := R - 1;
  d10 := R*d2 - d3;
  d6 :=d2*d5+d3+d2*(1-3*R);
  delta := (d6+tmp1)*d4+tmp1*(d9^3-d4);

  A := d10*d4;
  B := A^2*d10;
  C := 1/B;
  D := C*A;
  E := d2*d9;
  F := E*d8;
  G := E*d1*d9^2;
  H := E*d2*d9^2*d8^3;


  r := -F*(d5-R)*D;
  s := B/(G*delta);
  t := H*C;

  d1 := t;
  d2 := s;
  d3 := d1*d2+1;
  d4 := r*(r^2 - 3*d1) + d1^2 + d1;
  T  := d2*d4;
  d5 := T+d1;
  d6 := d2*(d5+1-3*r) + d3;
  d7 := T*d3+d1*(d3-d2);

  a := Root(d7, 3);
  b := Root(d2*d4^2, 3);
  c := Root(d1*d6^2, 3);

  return a, b, c;

end function;


function action_on_cubic_roots(a, b, c, hashtrits)

  trits := Intseq(hashtrits,3);
  while #trits ne 3 do trits cat:= [0]; end while;
  return a*z3^trits[1], b*z3^trits[2], c*z3^trits[3];

end function;



function get_b4s(R, S, T, a, b, c)
  
  D1 := T;
  D2 := S;
  tmp:= D1*D2;
  D3 := tmp + 1;
  D8 := R^2 - T;
  D4 := R*(D8-2*D1)+ D1^2 + D1;
  D5 := D2*D4+D1;
  D9 := R - 1;
  D10 := R*D2 - D3;
  D11 := D3 - D2;
  D6 :=D2*D5+D3+D2*(1-3*R);
  DELTA := (D6+tmp)*D4+tmp*(D9^3-D4);


  A0 := D8^2;
  A1 := A0*D9*DELTA;
  A2 := D2*A1;
  A3 := A2^2;
  A4 := A3*D2*A0;
  I1 := 1/A4;
  I2 := I1*D2;
  I3 := I2*D2;
  I4 := I1*A2;
  I5 := I4*D2;
  I6 := I5*D2;
  I7 := I6*A1;
  I8 := I7*D8;

  B0 := D1*D4;
  B1 := B0*D4;
  B2 := B0^2;
  B3 := D10^2;
  B4 := B3*D10;
  B5 := B4^2;
  B6 := B1*B4;
  B7 := B6*D10;
  B8 := B6^2;
  
  C1 := B7^2;
  C2 := B8*D8*D10*D11;
  C3 := B1*D4^2*A0*B5;
  C4 := B2*B3*B4*D11;
  C5 := B7*D8;
  C6 := B6*D3*A0;
  C8 := D1*D10;
  C7 := C8^2;
 
  cofab1 := C1*I1;
  cofab2 := C2*I2;
  cofab3 := C3*I3;
  cofab4 := C4*I4;
  cofab5 := C5*I5;
  cofab6 := C6*I6;
  cofab7 := C7*I7;
  cofab8 := C8*I8;
  cofab9 := D11;

  cofab1 *:= -6*tmp-2;
  cofab2 *:= -2;
  cofab3 *:= 6*tmp+4;
  cofab4 *:= 2;
  cofab5 *:= -6*tmp-2;
  cofab6 *:= -6;
  cofab7 *:= 6;
  cofab8 *:= 6*tmp+4;
  cofab9 *:= 2*tmp+1;

  b4ab := twist* ((cofab9 + cofab8*a + cofab7*a^2) + (cofab6 + cofab5*a + cofab4*a^2)*b + (cofab3 + cofab2*a + cofab1*a^2)*b^2);

  T0 := D2*A0;
  T1 := T0*DELTA;
  T2 := T1*D9;

  E0 := D4^2;
  E1 := E0*D4;
  E2 := E1*D5;
  E3 := 1/E2;
  E4 := I1*D9^2;
  E5 := E3*E1;
  E6 := E4*T1;
  E7 := E3*E0;
  E8 := E6*D8;
  E9 := E7*D5;
  E10:= I4*T2;

  J9 := E4*E5;
  J8 := I1*D8*D9;
  J7 := I1*A0;
  J6 := E6*E7;
  J5 := E8*E9;
  J4 := J7*T2*E9;
  J3 := E10*E3;
  J2 := J3*D5*D8;
  J1 := J2*D8;

  F0 := D1*D9;
  F1 := F0*D10;
  F2 := D10^2;
  F3 := D4*D10;
  F4 := D1*F2;
  F5 := F3*F2;

  C1 := 1;
  C2 := F1*D1;
  C3 := C2*F1;
  C4 := F4*D10;
  C5 := F4^2;
  C6 := C5*F1;
  C7 := C4*F5;
  C8 := C4^2*F3;
  C9 := C5^2*D4;

  cofbc1 := C1*J1;
  cofbc2 := C2*J2;
  cofbc3 := C3*J3;
  cofbc4 := C4*J4;
  cofbc5 := C5*J5;
  cofbc6 := C6*J6;
  cofbc7 := C7*J7;
  cofbc8 := C8*J8;
  cofbc9 := C9*J9;

  A1  := D9^3 - D4;
  A2  := R-T;
  A3  := 2*D9*A2;
  A4  := A3*A2;
  A5  := T*A1;
  A6  := 2*A5;
  A7  := 3*A6;
  A8  := 2*A7;
  A9  := A7+A8;
  A10 := T*A9;
  A11 := D4*D2;
  A12 := A11^2;
  A13 := R^2;
  A14 := 4*T;
  A15 := A13+A14;
  A16 := A15+A14;
  A19 := 2*A15;
  A20 := A19+A14;
  A21 := 2*A20;
  A22 := 2*R;
  A23 := A22*T;
  A24 := 3*R;
  A25 := A24*T;
  A26 := A15-A22;
  A27 := A15-A23;
  A28 := A16-A24;
  A29 := A16-A25;
  A30 := A21-10*R;
  A31 := A21-10*R*T;
  A32 := (T+2)*(-R^2-T) + (5*T+1)*R;
  A33 := T*A32;
  A34 := 6*A33;
  A35 := 2*A34;
  A36 := 3*A34;
  A37 := T*A33;
  A38 := 6*T*A26*D4+18*A37;
  A39 := 2*(9*T*(1-A2)- D4)*D4;
  A40 := T*((2*T+1)*(A13+T) - T*(T+5)*R);
  A41 := 6*A40;
  A42 := 2*A41;
  A43 := 3*A41;
  A44 := T*A43;
  A45 := 6*T*A27*D4 - A44;
  A46 := A39+A10;

  cofbc1 *:= ((T+1)*D4 + A6)*A12+((2*T*(8*T-7*R + 8)- D4)*D4 + A10)*A11 + T*A46;
  cofbc2 *:= 2*D9*(3*A2^2-D4)*A11 + 6*A27*D4+18*T*(A1-D9*(T-1)*(2*R-T-1));  
  cofbc3 *:= (2*A28*D4 + A35)*A11 + A38;
  cofbc4 *:= D9*A3*A12 + (A30*D4+A36)*A11 + A38;
  cofbc5 *:= (2*(-R+2*T+2)*D4+A7)*A11 + A46;
  cofbc6 *:= (2*A29*D4-A42)*A11 + A45;
  cofbc7 *:= A4*A12 + (A31*D4-A43)*A11 + A45;
  cofbc8 *:= (2*(-R+4*T)*D4+A34)*A11 + 6*T*A26*D4+18*A37;
  cofbc9 *:= (2*(-4*R+5*T+5)*D4+A8)*A11 + A46;

  b4bc := twist* ((cofbc1 + cofbc2*c + cofbc3*c^2) + (cofbc4 + cofbc5*c + cofbc6*c^2)*b + (cofbc7 + cofbc8*c + cofbc9*c^2)*b^2);

  return b4ab, b4bc;

end function;




function get_bi(R, S, T, b4ab, b4bc)
  
  Qb<b5,b6> := PolynomialRing(K,2);
  Qx<x> := PolynomialRing(Qb);
  
  invab := 1/(2*b4ab);

  A0 := T-1;
  A1 := T+1;
  A2 := A0^2;
  A3 := 2*A1;
  S2 := S^2;
  A4 := 2*S2;//2*S^2
  A5 := A4+S2;//3*S^2
  A6 := 2*A5;//6*S^2
  A7 := 2*A6;//12*S^2
  A8 := A7+A5;//15*S^2
  A9 := 2*A7;//24*S^2
  A10:= A9+A7;//36*S^2
  A11:= A4*T;//2*S^2*T
  A12:= A6*T;//6*S^2*T
  A13:= A9*T;//24*S^2*T
  A14:= A10*T;//36*S^2*T
  A15:= S*T;
  A16:= A15^2;//S^2*T^2
  A17:= A16+A15;//S^2*T^2+S*T
  A18:= A16-A15;//S^2*T^2-S*T
  A19:= 6*A17*T;
  A20:= 2*A18;
  A21:= A20+A18;
  A22:= 2*A21;//6*S^2*T^2-6*S*T
  A23:= 9*A17+3*A15;
  A24:= 2*A23;
  A25:= A12*T;//6*S^2*T^2
  A26:= 6*A15;

  R2 := R^2;
  R3 := R2*R;//R^3

  B0 := A2*S2+A3*S+1;
  b7 := B0 - b4ab^2;

  B7a:= b6*b7;
  B7b:= B7a*b6;
  B7c:= B7b*b6;
  I2 := invab^2;

  B1 := (-A12 + (A6 + 6*S))*R + (A25 -A12+A26);
  B1a:= B1 - 3*B7a;
  b3 := B1a*invab;

  B2a := (-A12 + (A8 + 6*S))*R2 + (A25 - A13 + A26)*R + A23;
  B2 := B2a - b3^2 - 3*B7b;
  B3 := B2*invab;
  B4 := -3*b7; 
  B5 := B4*invab;
  b2 := B3+B5*b5;

  B6a:= (-A11 + (20*S^2 + 2*S))*R3 - A14*R2 + A24*R + 2*T*(A16-1)-A20;
  B6 := B6a - B7c - 2*b3*B3;
  B7 := B6 * invab;
  B8 := -2*b3*B5-6*B7a;
  B9 := B8 * invab;
  b1 := B7 + B9*b5;
  
  B10a:= R3*(S2*R3 -A20) + (S*T^2+T)^2;
  B10:= B10a - B7^2;
  B11 := -2*B7*B9;
  B12 := -B9^2;
  B13 := -b7;

  B14a:= R2*(A6*R3 - A12*R2 -A22) + (A19)*R;
  B14 := B14a - 2*B3*B7;
  B15 := -2*B5*B7-2*B3*B9;
  B16 := -2*B5*B9-3*B7a;

  B17a:= R2*(A8*R2 - A13*R + A23) -A22*R + A19;
  B17 := B17a + (-2*B7*b3-B3^2);
  B18 := -2*B9*b3-2*B3*B5-3*B7b;
  B19 := -B5^2-3*b7;
 
  B20 := -3*b7*(3*b7*I2 +1);
  B21 := 36*b7^2*I2*(b3*invab - b6) -3*B7a;
  
  b5den := B15*B20 - B18*B21;
  b5num := B17*B21 - B14*B20;

  pol1 := B10*b5den^3+B11*b5num*b5den^2+B12*b5num^2*b5den+B13*b5num^3;
  pol2 := B14*b5den^2+B15*b5num*b5den+B16*b5num^2;

  b6ab := -Coefficients(GCD(pol1,pol2))[2];
  b5ab := Evaluate(b5num,b6,b6ab)/Evaluate(b5den,b6,b6ab);
  bi_ab := [K ! Evaluate(bi,[b5ab,b6ab]) : bi in [b1,b2,b3]] cat [K ! b4ab, K ! b5ab, K ! b6ab, K ! b7];

  invbc := 1/(2*b4bc);
  b7 := B0 - b4bc^2;

  B1b:=B1 - 3*b6*b7;
  b3 := B1b*invbc;

  B2b:= B2a - b3^2 - 3*b6^2*b7; 
  B3 := B2b*invbc;
  B4 := -3*b7;
  B5 := B4*invbc;
  b2 := B3+B5*b5;

  B6 := B6a - b6^3*b7 - 2*b3*B3;
  B7 := B6 * invbc;
  B8 := -2*b3*B5-6*b6*b7;
  B9 := B8 * invbc;
  b1 := B7 + B9*b5; 
 
  B10:= B10a - B7^2;
  B11 := -2*B7*B9;
  B12 := -B9^2;
  B13 := -b7;

  B14 := B14a - 2*B3*B7;
  B15 := -2*B5*B7-2*B3*B9;
  B16 := -2*B5*B9-3*b6*b7;

  B17 := B17a + (-2*B7*b3-B3^2);
  B18 := -2*B9*b3-2*B3*B5-3*b6^2*b7;
  B19 := -B5^2-3*b7;

  B20 := -9*b7^2*invbc^2 - 3*b7;
  B21 := 36*b3*b7^2*invbc^3-36*b6*b7^2*invbc^2-3*b6*b7;

  b5den := B15*B20 - B18*B21;
  b5num := B17*B21 - B14*B20;
  pol1 := B10*b5den^3+B11*b5num*b5den^2+B12*b5num^2*b5den+B13*b5num^3;
  pol2 := B14*b5den^2+B15*b5num*b5den+B16*b5num^2;
  b6bc := -Coefficients(GCD(pol1,pol2))[2];
  b5bc := Evaluate(b5num,b6,b6bc)/Evaluate(b5den,b6,b6bc);
  bi_bc := [K ! Evaluate(bi,[b5bc,b6bc]) : bi in [b1,b2,b3]] cat [K ! b4bc, K ! b5bc, K ! b6bc, K ! b7];

  return bi_ab, bi_bc;

end function;



function get_new_rst(R, S, T, bi_ab, bi_bc)

  Qnew<newr,newt,news,aa,cc,bb,dd,newtinv> := PolynomialRing(K,8,"grevlex");
  Qx<x> := PolynomialRing(Qnew);
  
  I0 := [newt*newtinv - 1]; // Assertion such that t =/= 0
  
  G1 := ((news - news*newt - 1)*x^3 + 3*news*(newr - newt)*x^2 + 3*news*newr*(newr - newt)*x - news*newt^2 + news*newr^3 + newt);
  Gab := (bi_ab[4]*x^3 + bi_ab[3]*x^2 + bi_ab[2]*x + bi_ab[1]); Gabeval := Qx ! Numerator(Evaluate(Gab,(aa*x + bb)/(cc*x + dd))*(cc*x + dd)^3);
  I1 := [Eltseq(G1)[i] - Eltseq(Gabeval)[i] : i in [1..4]];

  G2 := ((news - news*newt + 1)*x^3 + 3*news*(newr - newt)*x^2 + 3*news*newr*(newr - newt)*x - news*newt^2 + news*newr^3 - newt);
  Gbc := (bi_bc[4]*x^3 + bi_bc[3]*x^2 + bi_bc[2]*x + bi_bc[1]); Gabeval := Qx ! Numerator(Evaluate(Gbc,(aa*x + bb)/(cc*x + dd))*(cc*x + dd)^3);
  I2 := [Eltseq(G2)[i] - Eltseq(Gabeval)[i] : i in [1..4]];

  H2 := x^2 + x + newr;
  Hbc := (x^2 + bi_bc[6]*x + bi_bc[5]); Hbceval := Qx ! Numerator(Evaluate(Hbc,(aa*x + bb)/(cc*x + dd))*(cc*x + dd)^2);
  I3 := [LeadingCoefficient(Hbceval)*Eltseq(H2)[i] - Eltseq(Hbceval)[i] : i in [1..2]];

  GB := GroebnerBasis(I0 cat I1 cat I2 cat I3);

  newr := -Coefficients(GB[2])[2];
  news := -Coefficients(GB[4])[2];
  newt := -Coefficients(GB[3])[2];

  return newr, news, newt;

end function;



function get_isogenous_RST(r, s, t)
  
  d1 := t;
  d2 := s;
  tmp1:=d1*d2;
  d3 := tmp1 + 1;
  d8 := r^2 - t;
  d4 := r*(d8-2*d1)+ d1^2 + d1;
  d5 := s*d4+d1;
  d9 := r - 1;
  d10 := r*s - d3;
  d6 :=s*d5+d3+s*(1-3*r);
  delta := (d6+tmp1)*d4+tmp1*(d9^3-d4);

  A := d10*d4;
  B := A^2*d10;
  C := 1/B;
  D := A*C;
  E := d2*d9;
  F := E*d8;
  G := E*d1*d9^2;
  H := F^2*d9*d8;
  
  R := -F*(d5-r)*D;
  S := B/(G*delta);
  T := H*C;

  return R, S, T;

end function;



function hash(input);

  r, s, t := get_start_rst(p);

  for hashtrits in Intseq(input, 27) do
    a, b, c := get_pairings(r, s, t);
    a, b, c := action_on_cubic_roots(a, b, c, hashtrits);
    b4ab, b4bc := get_b4s(r, s, t, a, b, c);
    bi_ab, bi_bc := get_bi(r, s, t, b4ab, b4bc);
    r, s, t := get_new_rst(r, s, t, bi_ab, bi_bc);
    r, s, t := get_isogenous_RST(r, s, t);
  end for;

  return r, s, t;

end function;



hash(Random(2^100));
